generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ADMIN
  SUPERADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  solutions Solution[]
  exercises Exercise[] @relation("CreatedBy")
}

model Exercise {
  id           String   @id @default(cuid())
  title        String
  problemText    String?  // Text for given data (optional)
  problemImage   String?  // Image for given data (optional, Cloudinary URL)
  givenText    String?  // Text for given data (optional)
  givenImage   String?  // Image for given data (optional, Cloudinary URL)
  solutionSteps String?  // Solution steps text (optional)
  solutionImage String? // Solution steps image (optional, Cloudinary URL)
  correctAnswer String  // The answer to be checked automatically
  createdById   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  createdBy   User      @relation("CreatedBy", fields: [createdById], references: [id])
  solutions   Solution[]
  tags        Tag[]     @relation("ExerciseTags")
}

model Solution {
  id            String   @id @default(cuid())
  userId        String
  exerciseId    String
  finalAnswer   String   // Student's final answer (required)
  isCorrect     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  url       String?
  exercises Exercise[] @relation("ExerciseTags")
}