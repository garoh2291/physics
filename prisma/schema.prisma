generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ADMIN
  SUPERADMIN
}

enum SolutionStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_WORK
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdExercises Exercise[] @relation("CreatedBy")
  solutions       Solution[]
}

model Exercise {
  id            String   @id @default(cuid())
  title         String
  problemText   String?  // Made optional since we can have image instead
  problemImage  String?  // Cloudinary URL for problem image/PDF
  createdById   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  createdBy      User             @relation("CreatedBy", fields: [createdById], references: [id])
  exerciseAnswer ExerciseAnswer?
  solutions      Solution[]
}

model ExerciseAnswer {
  id            String   @id @default(cuid())
  exerciseId    String   @unique
  correctAnswer String
  givenData     String?
  solutionSteps String?
  solutionImage String?  // Cloudinary URL for solution image/PDF
  createdAt     DateTime @default(now())

  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model Solution {
  id            String         @id @default(cuid())
  userId        String
  exerciseId    String
  givenData     String?
  solutionSteps String?
  solutionImage String?  // Cloudinary URL for solution image
  finalAnswer   String?
  isCorrect     Boolean        @default(false)
  status        SolutionStatus @default(PENDING)
  adminFeedback String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId])
}