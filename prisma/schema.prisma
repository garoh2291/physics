generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ADMIN
  SUPERADMIN
}

enum StudiedPlace {
  SCHOOL
  UNIVERSITY
  NOT_STUDYING
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  name     String
  role     Role   @default(STUDENT)
  credits  Int    @default(20) // Credits for hints

  // Onboarding fields
  city           String?
  country        String?
  age            Int?
  studiedPlace   StudiedPlace?
  class          Int? // For school students (7-12)
  course         Int? // For university students (1-4)
  schoolName     String? // School or university name
  preferredLevel Int? // Preferred exercise level (1-5)
  isOnboarded    Boolean       @default(false) // Track if user completed onboarding

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  solutions  Solution[]
  exercises  Exercise[]  @relation("CreatedBy")
  hintUsages HintUsage[]
}

model Exercise {
  id             String  @id @default(cuid())
  exerciseNumber String? // Exercise number/identifier
  level          Int     @default(1) // Difficulty level (1-5)
  class          Int? // Target class (7-12)

  problemText   String? // Text for given data (optional)
  problemImage  String? // Image for given data (optional, Cloudinary URL)
  givenText     String? // Text for given data (optional)
  givenImage    String? // Image for given data (optional, Cloudinary URL)
  solutionSteps String? // Solution steps text (optional)
  solutionImage String? // Solution steps image (optional, Cloudinary URL)

  // Multiple correct answers support
  correctAnswerValues String[] // Array of correct answer values (encrypted)
  answerUnits         String[] // Array of units for each answer (e.g., ["mÂ²", "kg", "m/s"])

  // Hints
  hintText1  String? // First hint text (optional)
  hintImage1 String? // First hint image (optional, Cloudinary URL)
  hintText2  String? // Second hint text (optional)
  hintImage2 String? // Second hint image (optional, Cloudinary URL)
  hintText3  String? // Third hint text (optional)
  hintImage3 String? // Third hint image (optional, Cloudinary URL)

  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy  User        @relation("CreatedBy", fields: [createdById], references: [id])
  solutions  Solution[]
  tags       Tag[]       @relation("ExerciseTags")
  sources    Source[]    @relation("ExerciseSources")
  sections   Section[]   @relation("ExerciseSections")
  themes     Theme[]     @relation("ExerciseThemes")
  hintUsages HintUsage[]
}

model Solution {
  id                  String   @id @default(cuid())
  userId              String
  exerciseId          String
  finalAnswerValue    String // Student's final answer value (required)
  isCorrect           Boolean  @default(false)
  submittedAnswers    Json[] // Array of partial answer value submissions
  correctAnswersCount Int      @default(0) // Number of correct answers submitted
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId])
}

// Track which hints a student has used for each exercise
model HintUsage {
  id         String   @id @default(cuid())
  userId     String
  exerciseId String
  hintLevel  Int // 1, 2, or 3 for which hint was used
  usedAt     DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId, hintLevel])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  url       String?
  exercises Exercise[] @relation("ExerciseTags")
}

model Source {
  id        String     @id @default(cuid())
  name      String     @unique
  url       String?
  exercises Exercise[] @relation("ExerciseSources")
}

model Section {
  id        String     @id @default(cuid())
  name      String     @unique
  url       String?
  themes    Theme[]
  exercises Exercise[] @relation("ExerciseSections")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Theme {
  id        String     @id @default(cuid())
  name      String     @unique
  url       String?
  sectionId String
  section   Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  exercises Exercise[] @relation("ExerciseThemes")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
